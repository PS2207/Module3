Q1: Which of the following best expresses the difference between data and information?
(a) Data are meaningful facts whereas information is unprocessed symbols. (b) Data are raw facts,whereas information is processed and meaningful.✔️
(c) Data are always numbers,whereas information is always text.           (d) Data and information are interchangeable terms.

Q2: In the relational model, which element uniquely identifies each row in a table?
(a) Foreign key  (b) Alternate key  (c) Primary key✔️   (d) Candidate key

Q3: Which level of database abstraction describes how the data are actually stored on disk(indexes, hashing)?
(a)External/View level  (b)Conceptual level (c)Physical/Internal level✔️ (d)Logical level

Q4: Which database model stores information as nodes, edges, and properties, making it especially suitable for relationship-heavy data(e.g social networks)?
(a)Hierarchical model  (b)Relational model  (c)Graph model ✔️ (d)Flat-file database

Q5: Which statement is true for a flat-file database but false for a DBMS?
(a)Data are stored in multiple related tables (b)Complex querying and transaction control are provided.
(c)Only one simple table with no inter-table relationships is used.✔️ (d)It enforces strong data integrity constrainst automatically.

Q6: Logical data independence means that changes mae at which level should not affect external views?
(a) Physical level (b)Conceptual(logical) schema  (c)Internal storage model (d)Application program level

Q7: In a network DBMS, what relationship strength makes it more flexible than the hierarchical model?
(a)Only one-to-one links (b)Fixed one-to-many links  (c)Many-to-many links through multiple owners/members records  (d)No explicit links(all data are flat)

Q8: The primary goal of data abstraction in a DBMS is to:
(a)Compress data for efficient storage (b)Hide complex storage details from users while presenting a simplified view 
(c)Encrypt for security (d)Remove redundant data from all tables

Q9: Which NoSQL database type stores data as self-describing documnets(often JSON-like) and is popular for its flexible schema?
(a)Graph database (b)Document database (c)Key-value store (d)Column-family store

Q10: Given the table definition below,which statement correctly adds a primary-key constraints on column Sno?
CREATE TABLE Employee(
   Sno Number,
   Fname Varchar2(50),
   Lname VARCHAR2(50),
   Age NUMBER,
   Salary Number,
   Branch NUMBER
);
(a)ALTER TABLE Employee ADD PRIMARYKEY(Sno); (b)ALTER TABLE Employee ADD CONSTRAINT pk_emp PRIMARY KEY(Sno);✔️
(c)ALTER TABLE Employee ADD UNIQUE(Sno) PRIMARY; (D)ALTER Employee TABLE ADD KEY Sno;
To add a Primary Key in an existing table

-----------GradedAssignment1------------------

(Q1)To generate a list of all employees and their managers,including the top-level employees who do not have a manager, which query is most suitable?

SELECT E.EmpName, M.EmpName FROM Employees E INNERJOIN Employees M ON E.ManagerID=M.EmpID

(Q2)You need to find all departments that have no employees assigned to them.Which of the following is the most effective approach?
SELECT d.dept_name FROM departments d INNER JOIN employees e ON d.dept_id=e.dept_id WHERE e.emp_id IS NULL;
SELECT d.dept_name FROM departments d LEFT JOIN employees e ON d.dept_id=e.dept_id WHERE e.emp_id IS NULL;
SELECT d.dept_name FROM departments d WHERE dept_id NOT IN(SELECT e.dept_id FROM employees e WHERE dept_id IS NOT NULL);
Both (b) and (c) are effective approaches.

(Q3)What is the result of joining a table to itself using different aliases?
(a)A Syntax error  (b)A Cartesian Product  
(c)A Self Join,used for querying hierarchical data  (d)A Full Outer Join

(Q4)You have two tables,FullTimeEmployees and Contractors.To get a single list of all unique people who work for the company,regardless of their employemnt type,which operator should you use?
(a)UNIONALL  (b)INTERSECT  (C)UNION  (d)FULLOUTERJOIN

(Q5)Which set operator is functionally equivalent to a LEFTJOIN where the WHERE clause filters for NULL on the right table's key?
(a)UNION  (b)INTERSECT   (c)EXCEPT(MINUS)  (d)UNIONALL

(Q6)What is a key difference between UNION and UNIONALL?
(a)UNIONALL is faster beacuse it does not remove duplicate rows.
(b)UNION keeps duplicate rows, while UNIONALL removes them.
(c)They are functionally identical, but UNIONALL is the SQL standard.
(d)UNION requires the columns to have the same names, while UNIONALL does not.

(Q7)In which order are the following SQL clauses evaluated?
(a)SELECT,FROM,WHERE,GROUP BY,HAVING   (b)FROM,WHERE,GROUP BY,HAVING,SELECT
(c)FROM,GROUP BY,HAVING,WHERE,SELECT   (d)SELECT,WHERE,FROM,HAVING,GROUP BY

(Q8)To find all individuals who are listed as both a FullTimeEmployee and a Contractor, which operator is most direct?
(a)UNION  (b)EXCEPT (c)INTERSECT✔️  (d)MINUSALL
UNION: returns all distinct rows from both sets & removes duplicate entries.
EXCEPT: returns from the first set that are not in the second.
INTERSECT: returns only the rows that are present in both result sets.
MINUSALL: This is not a standard SQL operator.

(Q9)You want to find departments where the average salary is above $65,000.which query is correct?
(a)SELECT DeptName FROM Departments JOIN Eployees ON... WHERE AVG(Salary)>65000;
(b)SELECT DeptName FROM Departments JOIN Employees ON... GROUP BY DeptName HAVING AVG(Salary)>65000;
(c)SELECT DeptName FROM Departments JOIN Employees ON...GROUP BY DeptName WHERE AVG(Salary)>65000
(d)SELECT DeptName,AVG(Salary) FROM Departments...WHERE AVG(Salary)>65000;

(Q10)What is the purpose of the HAVING clause?
(a)To filter before they are grouped.  (b)To filter groups based on the result of an aggregate function.
(c)To substitute the WHERE clause when using joins.  (d)To order the results of a grouped query.

(Q11)What is the primary advantage of a window function over a standard aggregate function?
(a)They are faster  (b)They can perform calculations across a set of rows without collapsing them into a single.
(c)They an be used in the WHERE clause  (d)They only work on numeric data
Aggregate Function like AVG(), SUM(), COUNT()
-------------18-07-25-------------------------------------
--CREATE TABLE employees(emp_id INT PRIMARY KEY, emp_name VARCHAR(50), dept_id INT, dept_name VARCHAR(100));
/*
INSERT INTO employees(id , name, department, salary, age)
Values
(1,  'Alice',  'HR',        40000,     25),
(2,  'Bob',    'IT',        60000,     30),
(3,  'Jenny',  'HR',        34500,     28),
(4,  'john',   'IT',        75000,     35),
(5,  'Alex',   'FINANCE',   50000,     40);
*/
/*
INSERT INTO employees(emp_id , emp_name, dept_id, dept_name)
Values
(1,  'Alice',  101, 'Sales'),
(2,  'Bob',    102, 'Engineering'),
(3,  'Rahul',  103, 'HR'),
(4,  'Megha',   104, 'Electrical');
*/
/*
SELECT * FROM employees
 --WHERE (SELECT dept_id FROM employees WHERE dept_name='Sales'); /*single row inner*/
 WHERE dept_id= (SELECT dept_id FROM employees WHERE dept_name='Sales');
*/
/*
INSERT INTO employees(emp_id , emp_name, dept_id, dept_name)
Values(1,  'RR',  107, 'Sales');
*/
/*
UPDATE employees
SET dept_id
*/

CREATE TABLE employee (emp_id INT PRIMARY key, emp_name VARCHAR(100), dept_id VARCHAR(100);
--CREATE TABLE department  (dept_id INT PRIMARY key, dept_name VARCHAR(100), dept_id VRCHAR(100);
--INSERT into employee (emp_id,emp_name,dept_id) VALUES(1,'Alice' ,101);


-------breakout-----------

/*
CREATE TABLE employee (emp_id INT PRIMARY key, emp_name VARCHAR(100), dept_id VARCHAR(100);
--CREATE TABLE department  (dept_id INT PRIMARY key, dept_name VARCHAR(100), dept_location VRCHAR(100);
--INSERT into employee (emp_id,emp_name,dept_id) VALUES(1,'Alice' ,101);

INSERT INTO department VALUES(10, 'HR', 'uk'), (11, 'sales', 'usa'),(12, 'engineer', 'india');
                       
SELECT emp_name FROM employee WHERE dept_id IN(
     SELECT dept_id FROM department WHERE dept_location='uk';
    );
 */                      
 CREATE TABLE employee (emp_id INT PRIMARY key, NAME VARCHAR(100), department VARCHAR(100),salary, manager_id INT PRIMARY KEY);
CREATE TABLE employee (emp_id INT PRIMARY key, emp_name VARCHAR(100), dept_id VARCHAR(100);
 --sub query in corretalted -find employees who earn more than average of their department                  
 SELECT NAME, department,salary FROM employees e1 WHERE salary >(SELECT AVG(salary) FROM employees e2 WHERE e1.department=e2.department);                      
    
 Find employees who earn more than their manager?JOIN
 List employees with second highest salary? 
  SELECT * FROM employees ORDER by salary  DESC  offset 1 limit 1;                     
  SELECT NAME, salary  FROM employees WHERE salary =(SELECT salary FROM employees WHERE salary < (SELECT MAX(salary) FROM employees );;                       
                       
                       
                       
                       
                       
 --sub query in SELECT clause add extra column of average salary of their department
   --Suubquery in from clause find depatrment with max avg salary                    
SELECT  department,avg_salary 
FROM (SELECT department , AVG(salary) AS avg_salary 
      FROM employees  
      GROUP BY department
 ) AS dept_avg; 
    --OR ORDER BY avg_salary DESC LIMIT 1;
 WHERE  avg_salary =(
   SELECT MAX(avg_salary) 
   FROM (SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department )AS inner_avg);  
 -------------------------------------------------------                      
 SELECT NAME, department  
 FROM employees
 WHERE department IN(
   SELECT department
   FROM employees
   GROUP BY department
   HAVING AVG(salary) > 55000
   );
   --Subquery with ANY/All - Employees earning more than ANY person in HR   
   SELECT NAME, salary from employees                    
   WHERE salary > ANY (SELECT salary FROM employees WHERE department='HR');                    
------------------------------------------------------------------------------------                       
What are set operation?
when we needed set operation?
types of set operation?

SET Operation
SELECT column1,column2 FROM table1
UNION
SELECT column1,column2 FROM table2;

Table A:Employees_US      Table B:Employees_UK         Name
Emp_id   Name             Emp_id   Name                Alice
1        Alice            2        Bob                 Bob
2        Bob              4        Diana               Charlie
3        Charlie          5        Evan                Diana
                                                       Evan

SELECT Name FROM Employees_US
UNION ALL
SELECT Name FROM Employees_UK
Name
Alice
Bob
Charlie
Bob
Diana
Evan


Table A:Sales_Dept      Table B:HR_Dept            emp_name  
Emp_id   emp_name       Emp_id    emp_name         Raj
101      Raj            201       Priya            Meena
102      Meena          202       Raj              Alok
103      Alok           203       Nitin            Priya
                                                   Nitin

wrong query for that output-
SELECT emp_name FROM Sales_Dept WHERE emp_id <105
UNION ALL
SELECT emp_name FROM HR_Dept  WHERE emp_id < 105;

right query
SELECT emp_name FROM Sales_Dept AS name 
UNION 
SELECT emp_name FROM HR_Dept AS name;

SELECT emp_name FROM Sales_Dept
UNION 
SELECT emp_name FROM HR_Dept 
ORDER BY emp_name;
---------------------------------------
East_Sales           West_Sales
emp      sales       emp  sales
A        1000       
B        1200

How many rows will this query return? 4
Employees Contractors
emp_id  emp_name     emp_id  emp_name      
1       Ravi         101     Sneha   
2       Sneha        102     Kiran
3       Asha
SELECT emp_name FROM employees
UNION
SELECT emp_id, emp_name FROM contractors;

Will this query execute? no
SELECT emp_id, emp_name FROM employees
UNION
SELECT emp_name FROM contractors;

SELECT emp_id, emp_name FROM employees
UNION
SELECT emp_name,emp_id FROM contractors; column data type mismatch  int,varchar & varchar,int order
-----------------------------------------------------------------------------------------------------
if both tables  are empty? nothin return
SELECT  emp_name FROM employees
UNION
SELECT emp_name FROM contractors;

difference between these 2 queries-
SELECT column_name FROM table1 ORDER BY column_name    error
UNION
SELECT column_name FROM table2;

SELECT column_name FROM table1 
UNION
SELECT column_name FROM table2
ORDER BY column_name;
if Raj's emp_id is different in both tables,
UNION will treat them as 2 distinct rows & will not remove either as a duplicate.
--------------------------------------------------------
What is INTERSECT query?
SELECT name,dept FROM Employees
INTERSECT
SELECT name,dept FROM Employees;
name dept
Bob  Finance
-------------
SELECT name,dept FROM Employees
INTERSECT ALL
SELECT name,dept FROM Employees;
name     dept       name    dept
Alice    HR         Bob     Finance
Bob      Finance    Diana   Sales
Charlie  IT         Eva     HR
Diana    IT

name dept
Bob  Finance
----------------------------------------
What if one column is of different data type? Error due to data type
Use INTERSECT to find employees who are also managers and work in same department?
----------------------------------------------------------------------------------------- 
INTERSECT VS INNER JOIN
SELECT emp_id name
ON EmpID=EmpID2
---------------------------------
What is EXCEPT in SQL?
SELECT col1,col2,...
FROM table1
EXCEPT
SELECT col1,col2,...
FROM table2;

SELECT student_id, name FROM Students_2024
WHERE student_id NOT IN (SELECT student_id FROM Students_2025);


SELECT name,student_id FROM Students_2024
EXCEPT
SELECT student_id,name FROM Students_2025;

(Q)What will be the result for this?  nothin return subtracting same row
SELECT student_id FROM Students_2024
EXCEPT
SELECT student_id FROM Students_2024; takes all columns only , takes one column so column mismatch
SELECT 8 FROM Students_2024
EXCEPT
SELECT name FROM Students_2025;
How to find records in Table A but not in Table B or C? EXCEPT, UNION bth use
SELECT * FROM A
EXCEPT
SELECT * FROM B
EXCEPT
SELECT * FROM C
-----------------------
ADVANCED SQL SET OPERATION
(SELECT student_id FROM courses_2023
UNION
SELECT student_id FROM courses_2024)
EXCEPT
(SELECT student_id FROM courses_2023
INTERSECT
SELECT student_id FROM courses_2024);
------------
SELECT Course FROM courses_2023
INTERSECT
SELECT Course FROM courses_2024


------------------------------------------
FOREIGN KEY is used to references the PRIMARY KEY OF another table.
TBALE1:DEPARTMENT  TABLE2:EMPLOYEE
dept_id  dept_name     emp_id, emp_name, dept_id
CREATE TABLE department(dept_id INT PRIMARY KEY, dept_name VARCHAR(50)  );
CREATE TABLE employee(emp_id INT PRIMARY KEY, emp_name VARCHAR(50) , dept_id INT FOREIGN KEY(dept_id) REFERENCES department(dept_id) );
-----------------------------------------------------------------------
BEGIN TRANSACTION;

CREATE TABLE accounts(ID PRIMARY KEY , NAME VARCHAR(50), BALANCE FLOAT );
//What if error here
INSERT INTO accounts VALUES
(1,'ALICE'10000),
(2,'BOB',20000);

COMMIT;
-----------------------
BEGIN TRANSACTION;

UPDATE accounts
SET balance=balance-1000
WHERE ID=1;
//error
UPDATE accounts
SET balance=balance+1000
WHERE ID=2;

ROLLBACK;  //back to initial state
COMMIT: Save All Changes Permanently
----------------------------


SUPER KEY- ((st_id),(email),(phone), (st_id,email), (st_id,phone), (email,phone) , (st_id,email,phone))
CANDIDATE KEY- 
CREATE TABLE orders(ID INT PRIMARY KEY, customer_id REFERENCES customer(ID) );

INTEGRITY
MAINTAIN INTEGRITY-
ENTITY INTEGRITY - UNIQUELY IDENTIFY PRIMARY KEY
DOMAIN INTEGRITY-
REFERENCIAL INTEGRITY - FOREIGN KEY
//Entity Integrity

//Domain Integrity

//Referential Integrity
CREATE TABLE Enrollments(enroll_id INT PRIMARY KEY,st_id ,course_id VARCHAR(50), enroll_date DATE, );

ACID properties within TRANSACTION:
ATOMICITY- All successfull steps or if fail then Revert back transaction again
CONSISTENCY - A-1000 B- 1000
              A-500 B-1500   CONSISTENT TRANSACTION, OTHERWISE INCONSISTENCY TRANSACTION
ISOLATION- must not intefere two parallel transaction
DURABILITY- After commit -no chance to revert




































                       
                       
                       
                       
                       
                       











































