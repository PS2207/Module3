Q1: Which of the following best expresses the difference between data and information?
(a) Data are meaningful facts whereas information is unprocessed symbols. (b) Data are raw facts,whereas information is processed and meaningful.✔️
(c) Data are always numbers,whereas information is always text.           (d) Data and information are interchangeable terms.

Q2: In the relational model, which element uniquely identifies each row in a table?
(a) Foreign key  (b) Alternate key  (c) Primary key✔️   (d) Candidate key

Q3: Which level of database abstraction describes how the data are actually stored on disk(indexes, hashing)?
(a)External/View level  (b)Conceptual level (c)Physical/Internal level✔️ (d)Logical level

Q4: Which database model stores information as nodes, edges, and properties, making it especially suitable for relationship-heavy data(e.g social networks)?
(a)Hierarchical model  (b)Relational model  (c)Graph model ✔️ (d)Flat-file database

Q5: Which statement is true for a flat-file database but false for a DBMS?
(a)Data are stored in multiple related tables (b)Complex querying and transaction control are provided.
(c)Only one simple table with no inter-table relationships is used.✔️ (d)It enforces strong data integrity constrainst automatically.

Q6: Logical data independence means that changes mae at which level should not affect external views?
(a) Physical level (b)Conceptual(logical) schema  (c)Internal storage model (d)Application program level

Q7: In a network DBMS, what relationship strength makes it more flexible than the hierarchical model?
(a)Only one-to-one links (b)Fixed one-to-many links  (c)Many-to-many links through multiple owners/members records  (d)No explicit links(all data are flat)

Q8: The primary goal of data abstraction in a DBMS is to:
(a)Compress data for efficient storage (b)Hide complex storage details from users while presenting a simplified view 
(c)Encrypt for security (d)Remove redundant data from all tables

Q9: Which NoSQL database type stores data as self-describing documnets(often JSON-like) and is popular for its flexible schema?
(a)Graph database (b)Document database (c)Key-value store (d)Column-family store

Q10: Given the table definition below,which statement correctly adds a primary-key constraints on column Sno?
CREATE TABLE Employee(
   Sno Number,
   Fname Varchar2(50),
   Lname VARCHAR2(50),
   Age NUMBER,
   Salary Number,
   Branch NUMBER
);
(a)ALTER TABLE Employee ADD PRIMARYKEY(Sno); (b)ALTER TABLE Employee ADD CONSTRAINT pk_emp PRIMARY KEY(Sno);✔️
(c)ALTER TABLE Employee ADD UNIQUE(Sno) PRIMARY; (D)ALTER Employee TABLE ADD KEY Sno;
To add a Primary Key in an existing table

-----------GradedAssignment1------------------

(Q1)To generate a list of all employees and their managers,including the top-level employees who do not have a manager, which query is most suitable?

SELECT E.EmpName, M.EmpName FROM Employees E INNERJOIN Employees M ON E.ManagerID=M.EmpID

(Q2)You need to find all departments that have no employees assigned to them.Which of the following is the most effective approach?
SELECT d.dept_name FROM departments d INNER JOIN employees e ON d.dept_id=e.dept_id WHERE e.emp_id IS NULL;
SELECT d.dept_name FROM departments d LEFT JOIN employees e ON d.dept_id=e.dept_id WHERE e.emp_id IS NULL;
SELECT d.dept_name FROM departments d WHERE dept_id NOT IN(SELECT e.dept_id FROM employees e WHERE dept_id IS NOT NULL);
Both (b) and (c) are effective approaches.



-------------18-07-25-------------------------------------
--CREATE TABLE employees(emp_id INT PRIMARY KEY, emp_name VARCHAR(50), dept_id INT, dept_name VARCHAR(100));
/*
INSERT INTO employees(id , name, department, salary, age)
Values
(1,  'Alice',  'HR',        40000,     25),
(2,  'Bob',    'IT',        60000,     30),
(3,  'Jenny',  'HR',        34500,     28),
(4,  'john',   'IT',        75000,     35),
(5,  'Alex',   'FINANCE',   50000,     40);
*/
/*
INSERT INTO employees(emp_id , emp_name, dept_id, dept_name)
Values
(1,  'Alice',  101, 'Sales'),
(2,  'Bob',    102, 'Engineering'),
(3,  'Rahul',  103, 'HR'),
(4,  'Megha',   104, 'Electrical');
*/
/*
SELECT * FROM employees
 --WHERE (SELECT dept_id FROM employees WHERE dept_name='Sales'); /*single row inner*/
 WHERE dept_id= (SELECT dept_id FROM employees WHERE dept_name='Sales');
*/
/*
INSERT INTO employees(emp_id , emp_name, dept_id, dept_name)
Values(1,  'RR',  107, 'Sales');
*/
/*
UPDATE employees
SET dept_id
*/

CREATE TABLE employee (emp_id INT PRIMARY key, emp_name VARCHAR(100), dept_id VARCHAR(100);
--CREATE TABLE department  (dept_id INT PRIMARY key, dept_name VARCHAR(100), dept_id VRCHAR(100);
--INSERT into employee (emp_id,emp_name,dept_id) VALUES(1,'Alice' ,101);


-------breakout-----------

/*
CREATE TABLE employee (emp_id INT PRIMARY key, emp_name VARCHAR(100), dept_id VARCHAR(100);
--CREATE TABLE department  (dept_id INT PRIMARY key, dept_name VARCHAR(100), dept_location VRCHAR(100);
--INSERT into employee (emp_id,emp_name,dept_id) VALUES(1,'Alice' ,101);

INSERT INTO department VALUES(10, 'HR', 'uk'), (11, 'sales', 'usa'),(12, 'engineer', 'india');
                       
SELECT emp_name FROM employee WHERE dept_id IN(
     SELECT dept_id FROM department WHERE dept_location='uk';
    );
 */                      
 CREATE TABLE employee (emp_id INT PRIMARY key, NAME VARCHAR(100), department VARCHAR(100),salary, manager_id INT PRIMARY KEY);
CREATE TABLE employee (emp_id INT PRIMARY key, emp_name VARCHAR(100), dept_id VARCHAR(100);
 --sub query in corretalted -find employees who earn more than average of their department                  
 SELECT NAME, department,salary FROM employees e1 WHERE salary >(SELECT AVG(salary) FROM employees e2 WHERE e1.department=e2.department);                      
    
 Find employees who earn more than their manager?JOIN
 List employees with second highest salary? 
  SELECT * FROM employees ORDER by salary  DESC  offset 1 limit 1;                     
  SELECT NAME, salary  FROM employees WHERE salary =(SELECT salary FROM employees WHERE salary < (SELECT MAX(salary) FROM employees );;                       
                       
                       
                       
                       
                       
 --sub query in SELECT clause add extra column of average salary of their department
   --Suubquery in from clause find depatrment with max avg salary                    
SELECT  department,avg_salary 
FROM (SELECT department , AVG(salary) AS avg_salary 
      FROM employees  
      GROUP BY department
 ) AS dept_avg; 
    --OR ORDER BY avg_salary DESC LIMIT 1;
 WHERE  avg_salary =(
   SELECT MAX(avg_salary) 
   FROM (SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department )AS inner_avg);  
 -------------------------------------------------------                      
 SELECT NAME, department  
 FROM employees
 WHERE department IN(
   SELECT department
   FROM employees
   GROUP BY department
   HAVING AVG(salary) > 55000
   );
   --Subquery with ANY/All - Employees earning more than ANY person in HR   
   SELECT NAME, salary from employees                    
   WHERE salary > ANY (SELECT salary FROM employees WHERE department='HR');                    
                       
                       
                       
                       
                       
                       
                       
                       











































