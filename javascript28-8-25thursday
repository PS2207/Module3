//3 major keywords (var,let,const) to declare variable:
var a=10
var a=20  -var allows Re-declaration
a=30      -var also allows Re-assignment

let a=10 
let a=20 - let doesn't allow Re-declaration
a=30     - let allows Re-assignment

const a=10 
const a=20 -doesn't allow Re-assignment
let a=20   -doesn't allow Re-declaration
-------------------------------------------------------------------- 
//const doesn't allow redeclaration,reassignment

//Data Types:
number ,string,boolean, undefined, null, arrays, objects

let x;
console.log(x) //undefined
 		
let y =null;	
console.log(y) //object

let list = [1,2,3,4, "Java", false, null]
console.log(list) //object

Object: key-value pair
let obj = {name: "ps", age:30, hasPassport:false}

console.log(typeof y)//object
console.log(typeof obj)//object
console.log(typeof list)//object
console.log(typeof x)//undefined
Everythi
ng in javascript is object
--------------------------------------------------------------------------

//arithmetic operators - as the name suggests it works only on numbers
logical operators
comparison operators
//Precedence-    />* >+>-

//multiplication & division > subtraction & addition

//Concatination
console.log(typeof("javascript" + 10))//javascript10
console.log(typeof("20" + "10")) =//2010
concationation(string+number) =string
-------------------------------------------------------

//type coersin
let Momos = 100
let samosa = "50"
console.log(Momos +samosa)//10050
//that's why use- type coersion

-------------------------------------------
//Step 1: Declare a number, a string
//Try touse + operator on them
//Try to use - operator on them
//Try to use * / operator them
//consoole.log(value and typeof)
------------------------------------------
let a = 10;
let b = "20";
let b="abc" Nan(Not a number in case of * / . but type of(Nan) is number)

// Using + (concatenation happens when one is string)
console.log(a + b, typeof (a + b));   // "1020" (string)

// Using - (JavaScript tries to convert string to number)
console.log(a - b, typeof (a - b));   // -10 (number) javascript using implicit type coersin here

// Using * and / (again, string is converted to number)
console.log(a * b, typeof (a * b));   // 200 (number)
console.log(a / b, typeof (a / b));   // 0.5 (number)
---------------------------------------------------------------------------------------------------
//explicit if i do coersin

a=10
b="10"
//comparison operator
console.log(a == b)//true value checking loose equality
console.log(a === b)//false type checking strict equality

logical operators javascript run from left
console.log(false || true && false)//false

let x =10
let y = typeof x
console.log(typeof y)//string
-------------------------------------------------------------------------------------------------------

let a = 10 + "20";
// 10 (number) + "20" (string) â†’ 
// JS converts number to string when + is used.
// So "10" + "20" â†’ "1020" (string).
console.log("5" * 2 + "1");
// "5" * 2 â†’ here * forces numeric conversion. "5" â†’ 5.
// So 5 * 2 = 10.
// Now 10 + "1" â†’ 10 (number) gets converted to string because + with string â†’ "10" + "1" = "101"
console.log("10" - "7" + 3);
// "10" - "7" â†’ both strings are converted to numbers when - is used.
// So 10 - 7 = 3.
// Now 3 + 3 = 6 (both numbers, so normal addition).
console.log( null == undefined, null === undefined );
// ðŸ‘‰ == â†’ loose equality, allows type coercion. In JS, null == undefined is true.
// ðŸ‘‰ === â†’ strict equality, no type coercion. null and undefined are different types.
// So result: true false
// Output: true false
console.log( [] + 1, [1] + 1 );
// [] + 1 â†’ empty array [] is converted to an empty string "" when used with +.
// So "" + 1 = "1".
// [1] + 1 â†’ [1] converts to string "1".
// So "1" + 1 = "11".
// Output: "1" "11"
let x; 
console.log(typeof x, typeof y);
// let x; means x is declared but not initialized, so value = undefined.
// typeof x â†’ "undefined".
// y is not declared at all. Normally referencing undeclared variables throws ReferenceError, but typeof y is special â€” it does not throw error, instead it returns "undefined












