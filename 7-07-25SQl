Table is the basic object in a database that stores data in rows and columns.
Each columns has a specific data type(like INT,VARCHAR,DATE,etc)
You can insert ,update,delete,select data from a table.
---------------------------------------------------------------------
Insert data without mentioning column names-
INSERT data INTO students
values(1,'alice',20,'alice@gmail.com');

Insert data by mentioning column names(this is the best practice)-
INSERT data INTO students (id,name,age,email)
values(1,'alice', 20, 'alice@gmail.com');
-------UPDATE-----------------------------------
SYNTAX:
UPDATE table_name 
SET column1=value1,  column2=value2,....
WHERE condition;
EXAMPLE:
UPDATE students
SET name="Bob', email='bob@gmail.com'
WHERE id=1;
-------DELETE------------------------------------
SYNTAX:
DELETE FROM table_name
WHERE CONDITION;
Example:
DELETE FROM students
WHERE age>20;
------------------------------------------

Operation              QueryExample                        Result
Delete One Row        DELETE FROM students WHERE id=1;    Only one row deleted
Delete multiple rows  DELETE FROM students WHERE age>20;  Delete matching rows
Delete all rows       DELETE FROM students;               Clears the entire table
Without WHERE         








SQL Language categories- 
DDL(Data Definition Language)- Defines and modifies the structure of database objects like- tables,views,and schemas.
DML(Data Manipulation Language)- Deals with operations on data, such as inserting,updating,and deleting records.
INSERT data into a table. UPDATE existing records in a table.  DELETE records from a table
DQL(Data Query Lnaguage)- Used to fetch data from database without modifying it. It includes the powerful SELECT command.
DCL(Data Control Language) (Transaction Control Lnaguage)






******************************9-07-2025*************************
INTRODUCTION TO ADVANCED FILTERING KEYWORDS:-
IN- for checking membership in a list.
BETWEEN- for specifying ranges
IS NULL- for checking the presence of 6missing values
IS NOT NULL- for checking the absence of values.
BETWEEN OPERATOR - For range checking
SELECT * FROM table_name / column1,column2,column3....
WHERE column, BETWEEN value1 AND value2;
SELECT * FROM students WHERE Age BETWEEN 20 AND 24;

IS NULL - Checking Missing Data return
SELECT * FROM students WHERE email IS NULL;

IS NOT NULL- Filtering Valid Entries
SELECT * FROM students WHERE email IS NOT NULL;
Can use DISTINCT

SELECT id,name,age,course
FROM students 
WHERE age>=18 AND course IN('MATH','SCIENCE') AND email IS NOT NULL 
LIMIT 10;

SELECT column1,column2,(column1+column2) AS total FROM table_name;
SELECT first_name,last_name,(f_name+l_name)
SELECT item,quantity,price(quantity*price) AS total FROM sales;
SELECT product_name,price, (price*0.9) AS discounted_price FROM products;

-------------------11-07-2025----------------------------
SELECT MAX(department) AS max_salary FROM employee;
SELECT SUM(department) AS sum_salary FROM employee;
SELECT AVG(department) AS avg_salary FROM employee;

Using GROUP BY with AVG() Department-Wise Average Salary
SELECT department_id, AVG(salary)
FROM employees
GROUP BY department;

SELECT department FROM employees
GROUP BY (department,salary);

SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM employee;

The SQL HAVING clause is used to filter the results of a GROUP BY query based on the result of an aggregate function.
SELECT department_id, COUNT(*) AS total
FROM employees
GROUP BY deprtment_id
HAVING COUNT(*)>5;

SELECT department_id, COUNT(*) AS total
FROM employees
GROUP BY deprtment_id
HAVING COUNT(*)>5;

SE
1
DROP TABLE IF EXISTS Employee,Department;
2
CREATE TABLE Department(
   dept_id SERIAL PRIMARY KEY,
   dept_name VARCHAR(50) UNIQUE NOT NULL
);
3
CREATE TABLE Employee(
  emp_id SERIAL PRIMARY KEY,
  NAME VARCHAR(100) NOT NULL,
  salary NUMERIC(10,2) CHECK (salary >= 0),
  dept_id INT REFERENCES Department(dept_id)
);
4
INSERT INTO Department(dept_name) VALUES
  ('Engineering'),
  ('HR'),
  ('Sales');
5
INSERT INTO employees(id,name,department,salary)
VALUES(1,'Alice', 'IT', 90000),
(2,'Bob', 'HR', 100000),
(3,'John', 'IT', 200000),
(4,'Jenny', 'IT', 100000),
(5,'Alia', 'Sales', 90000),
(6,'Ele', 'Customer Service', 40000),
(7,'Alex', 'Sales', 70000),
(8,'Bobby', 'HR', 100000);

6
INSERT INTO Employees (NAME, salary, dept_id) VALUES
 ('Alice',600000,4)
7
SELECT * FROM department;

-------GROUP BY----------------------------------------
Aggregate functions - Average,  Minimum, Maximum, Count

SELECT department, AVG(salary) AS average_salary
FROM employees
GROUP BY department;

SELECT dept_id, MIN(salary) AS average_salary
FROM employees
GROUP BY dept_id;

SELECT dept_id, COUNT(*) AS num_employees
FROM employees 
GROUP BY dept_id;
------------HAVING------------------------------
comment in sql -- or /*... */
SELECT dept_id, AVG(salary) AS average_salary
FROM employees
GROUP BY dept_id
HAVING AVG(salary) >50000;

SELECT dept_id, AVG(salary) AS average_salary
FROM employees
GROUP BY dept_id
HAVING COUNT(*) >50000;

------------ORDER BY------------------------------
SELECT NAME, salary
FROM employees
ORDER BY salary DES or ASC;

SELECT COL_NAME
FROM TABLE_NAME
WHERE customer_id IN(2,8,9) AND
(amount > 10 OR amount < 2)
ORDER BY customer ASC (IF invalid)
ORDER BY amount DESC

-------LIMIT, OFFSET-----------------------------------------
SELECT * FROM employees LIMIT 2;

SELECT * 
FROM employees 
ORDER BY salary DESC
LIMIT 4;

SELECT * 
FROM employees 
ORDER BY salary DESC 
OFFSET 4;

SELECT * 
FROM employees 
ORDER BY salary DESC 
LIMIT 2 OFFSET 4;

SELECT *
FROM employees
WHERE salary BETWEEN 50000 AND 700000;

SELECT *
FROM employees
WHERE salary IN('Alice');



























PostGreSQL table small or capital 



Aggregation function is the function that performs operation on a set of data & return.

Count() is an agg return number of rows exist in a datbase
MAX() -SELECT MAX() AS max_
MIN()
SUM()
SELECT MIN() AS highest_salary FROM employee;

SELECT department , AVG(salary) AS avg_salary
FROM employees
GROUP BY department;
department avg_salary
HR         42500 
IT         67500    
FINANCE    50000
Table: employees
emp_id   name    department   salary    age
1        Alice      HR        40000     25
2        Bob        IT        60000     30
3        Jenny      HR        34500     28
4        john       IT        75000     35
5        Alex       FINANCE   50000     40

(Q)
id   name
1    Alice
2    NULL
3    Bob
SELECT COUNT(*) FROM table_name;
SELECT COUNT() FROM table_name;
SELECT department, SUM(salary)
FROM employees
HAVING SUM(salary) > 50000;

SELECT SUM(salary) / COUNT(*)  AS avg_salary FROM employees;
SELECT AVG(salary) FROM employees;
SELECT department, 
FROM
HAVING
GROUP BY 
---------------------------------------------------------------------
Complex conditions with GROUP BY and HAVING in SQL:
SELECT department, COUNT(*) AS emp_count, AVG(salary) AS  avg_salary
FROM employees
GROUP BY department
HAVING COUNT(*) > 2 AND AVG(salary) >= 45000;

SELECT department, MAX(salary) AS max_salary
FROM employees
GROUP BY department
HAVING MAX(salary) BETWEEN 45000 AND 75000 
    AND department IN('HR','Finance');


SELECT department, COUNT(salary) AS non_null_salaries, COUNT(*) AS total_employees
FROM employees
GROUP BY department
HAVING COUNT(salary) < COUNT(*);


SELECT department, AVG(salary) AS avg_salary, MIN(age)
FROM employees
GROUP BY department
HAVING AVG(salary) FROM employees
   SELECT AVG(salary)
   FROM employees
   WHERE
-----------------------------------------------------------
What are window functions in SQL?
FUNCTION       DESCRIPTION
ROW_NUMBER()   Assigns a unique number to each row
RANK()         Ranks with gaps in case of ties
DENSE_RANK()   Ranks without gaps in case of ties
SUM()/AVG()    Comulative or partition-based totals
LAG()/LEAD()   Access previous or next row value

Table: employees
name     department   salary    row_num
Charlie    HR         45000     1
Alice      IT         40000     2
David      HR         75000     1
Bob        IT         60000     2
Eva        FINANCE    50000     1
------------------------------------------------------
SELECT name,salary,
  LAG(salary,1) OVER(ORDER BY salary) AS prev_salary
FROM employees;
name      salary   prev_salary
Alice     40000    NULL
Charlie   45000    40000
EVe       50000    45000
Bob       60000    50000
David     75000    60000
-------------------------------------------------------
SELECT name,salary,
  DENSE_RANK() OVER (ORDER BY salary DESC) AS salary_dense_rank
FROM employees;
name      salary  salary_dese_rank
David     75000    1
Bob       60000    2
Eva       50000    3
Charlie   45000    4
Alice     40000    5    
------------------------------
Whta is INNER JOIN in SQL?
SELECT students.student_id, students.name, marks.marks
FROM students
INNER JOIN marks
ON students.student_id = marks.student_id;

SELECT students.student_id, students.name, marks.marks
FROM students
LEFT JOIN marks
ON students.student_id = marks.student_id;

SELECT students.student_id, students.name, marks.marks
FROM students
RIGHT JOIN marks
ON students.student_id = marks.student_id;

SELECT students.student_id, students.name, marks.marks
FROM students
FULL OUTER JOIN marks
ON students.student_id = marks.student_id;

SELECT students.student_id, students.name, marks.subject, marks,marks
FROM students
LEFT OUTER JOIN marks
ON students.student_id = marks.student_id;

SELECT students.student_id, students.name, marks.subject, marks,marks
FROM students
RIGHT OUTER JOIN marks
ON students.student_id = marks.student_id;

SELECT students.student_id, students.name, marks.subject, marks,marks
FROM students
FULL OUTER JOIN marks
ON students.student_id = marks.student_id;

Join Type      Includes                              Missing Side Shows
INNER JOIN     Only matching rows in both tables     Excluded
RIGHT JOIN     All from left + matches from right    Right = NULL
LEFT JOIN      All from right + matches from left    Left=NULL
FULL JOIN      All rows from both side               NULL on both sides

Type                   Includes unmatched rows from...
LEFT OUTER JOIN         Left table only
RIGHT OUTER JOIN        Right table only
FULL INNER JOIN         Both left and right tables

What is a CROSS JOIN?
Join Type    Matches Needed
INNER JOIN
LEFT JOIN
RIGHT JOIN
FULL JOIN
CROSS JOIN

What is a SELF JOIN in SQL?

------------------------------
Returns one value
Returns one row(multiple columns)
Returns one column
SELCT name 
FROM employees WHERE salary > 50000;

SELECT e.name
FROM employees e
JOIN(
  SELECT AVG(salary) AS avg_salary FROM employees
) avg_able
ON e.salary > avg_table.avg_salary;

SELECT name FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

Scalar Subquery
Row Subquery 
1  Alice 10 60000
2  Bob    10 40000
3  Charlie  20 50000   
output : name=Alice
SELECT name FROM employees
WHERE (department_id, salary)=
  (SELECT department_id, MAX(salary) FROM employees);
----------------------------------------------------------
Column Subquery:-
department_id location       emp_id    name       department_id
10            Delhi             1      Alice       10
20            Mumbai            2      Bob         20
                                3      Charlie     30
SELECT name FROM employees
WHERE department_id IN
  (SELECT department_id FROM departments WHERE location = 'Delhi');
output : name=Alice
-----------------------------------------------------------------------
Correlated Subquery:
emp_id  name      department_id   salary
1       Alice     10              60000
2       Bob       10              40000
3       Charlie   20              50000
SELECT name FROM employees e
WHERE salary > (
  SELECT AVG(salary)
  FROM employees
  WHERE department_id = e.department_id
);
output: name Alice
--------------------------------------------------

SELECT name FROM employees e
WHERE EXISTS(
 SELECT 1 FROM departments d
 WHERE e.department_id = d.department_id
 AND location = 'Mumbai'
);
Correlated Subquery:

SELECT name, salary, department_id
FROM employees e
WHERE salary > (
  SELECT AVG(salary)
  FROM employees
  WHERE department_id = e.department_id
);

10   Alice.Bob        (60000+400000)
20   Charlie,David
30   Eva
name      salary  department_id
Alice     60000   10
Charlie   50000   20
-------------------------------------------
Find students whose marks are higher than the average marks of their gender group
students_id  name     gender   marks
1            Alice
2            Bob
3            Charlie
4            Daisy
5            Eva 
6            Frank
---------------------------------------------
name  grade  marks
     A        85
     B       78
 A            90
C        65
D           
A
SELECT name,grade,marks FROM students s
WHERE marks =(
  SELECT MIN(marks)
  FROM students
  WHERE grade= s.grade
);
name grade  marks
ALice
--------------------------------------------

Find errors-
SELECT name marks FROM students WHERE marks > 70;  Comma missing problem
SELECT * FROM students WHERE grade = 'A';    Wrong keyword use- FROM
SELECT name WHERE grade = 'B' FROM students;    Wrong order

SELECT name,AVG(marks) FROM students;
SELECT name FROM students WHERE marks => 80





































































;






















